import { makeTbl, fillInNavFooter, expand } from "./report.js";

// results expand button
const exp_btn = document.getElementById('exp_btn');

exp_btn.addEventListener('click', () => expand(0), false);

// exp dist data (raw)
const data_dictionary = {
    "tiles": [11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 29, 29, 29, 29, 31, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 41, 41, 41, 41, 42, 42, 42, 42, 43, 43, 43, 43, 44, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47],
    "values": [1911, 758, 318, 160, 3532, 1384, 336, 78, 3617, 1596, 351, 86, 3815, 1666, 412, 102, 3662, 1686, 395, 108, 3668, 1748, 443, 94, 3381, 1764, 468, 109, 2669, 1074, 347, 132, 1763, 759, 304, 176, 1877, 793, 292, 147, 3568, 1478, 303, 92, 3474, 1494, 385, 97, 3741, 1706, 422, 104, 3692, 1625, 402, 102, 3604, 1675, 448, 110, 3415, 1743, 471, 110, 2667, 1186, 388, 132, 1721, 717, 303, 167, 1925, 808, 346, 159, 3568, 1447, 328, 91, 3432, 1506, 358, 111, 3705, 1674, 420, 107, 3742, 1700, 456, 106, 3562, 1732, 453, 103, 3409, 1655, 459, 109, 2617, 1138, 315, 127, 1742, 715, 316, 191, 524, 56, 32, 18, 454, 70, 36, 18, 465, 68, 28, 15, 489, 62, 21, 16, 473, 88, 35, 15, 488, 65, 26, 11, 476, 81, 19, 19],
    "ln_values": [7.555, 6.631, 5.762, 5.075, 8.17, 7.233, 5.817, 4.357, 8.193, 7.375, 5.861, 4.454, 8.247, 7.418, 6.021, 4.625, 8.206, 7.43, 5.979, 4.682, 8.207, 7.466, 6.094, 4.543, 8.126, 7.475, 6.148, 4.691, 7.889, 6.979, 5.849, 4.883, 7.475, 6.632, 5.717, 5.17, 7.537, 6.676, 5.677, 4.99, 8.18, 7.298, 5.714, 4.522, 8.153, 7.309, 5.953, 4.575, 8.227, 7.442, 6.045, 4.644, 8.214, 7.393, 5.996, 4.625, 8.19, 7.424, 6.105, 4.7, 8.136, 7.463, 6.155, 4.7, 7.889, 7.078, 5.961, 4.883, 7.451, 6.575, 5.714, 5.118, 7.563, 6.695, 5.846, 5.069, 8.18, 7.277, 5.793, 4.511, 8.141, 7.317, 5.881, 4.71, 8.217, 7.423, 6.04, 4.673, 8.227, 7.438, 6.122, 4.663, 8.178, 7.457, 6.116, 4.635, 8.134, 7.412, 6.129, 4.691, 7.87, 7.037, 5.753, 4.844, 7.463, 6.572, 5.756, 5.252, 6.261, 4.025, 3.466, 2.89, 6.118, 4.248, 3.584, 2.89, 6.142, 4.22, 3.332, 2.708, 6.192, 4.127, 3.045, 2.773, 6.159, 4.477, 3.555, 2.708, 6.19, 4.174, 3.258, 2.398, 6.165, 4.394, 2.944, 2.944],
    "appearances": [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4],
    "ln_appearances": [0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386, 0.0, 0.693, 1.099, 1.386],
    "proportion": [0.607, 0.241, 0.101, 0.051, 0.663, 0.26, 0.063, 0.015, 0.64, 0.282, 0.062, 0.015, 0.636, 0.278, 0.069, 0.017, 0.626, 0.288, 0.068, 0.018, 0.616, 0.294, 0.074, 0.016, 0.591, 0.308, 0.082, 0.019, 0.632, 0.254, 0.082, 0.031, 0.587, 0.253, 0.101, 0.059, 0.604, 0.255, 0.094, 0.047, 0.656, 0.272, 0.056, 0.017, 0.637, 0.274, 0.071, 0.018, 0.626, 0.286, 0.071, 0.017, 0.634, 0.279, 0.069, 0.018, 0.617, 0.287, 0.077, 0.019, 0.595, 0.304, 0.082, 0.019, 0.61, 0.271, 0.089, 0.03, 0.592, 0.247, 0.104, 0.057, 0.595, 0.25, 0.107, 0.049, 0.657, 0.266, 0.06, 0.017, 0.635, 0.279, 0.066, 0.021, 0.627, 0.283, 0.071, 0.018, 0.623, 0.283, 0.076, 0.018, 0.609, 0.296, 0.077, 0.018, 0.605, 0.294, 0.081, 0.019, 0.624, 0.271, 0.075, 0.03, 0.588, 0.241, 0.107, 0.064],
    "ln_proportion": [-0.499, -1.424, -2.292, -2.979, -0.411, -1.348, -2.764, -4.224, -0.446, -1.264, -2.779, -4.185, -0.452, -1.281, -2.678, -4.074, -0.469, -1.244, -2.695, -3.992, -0.484, -1.225, -2.598, -4.148, -0.526, -1.177, -2.504, -3.961, -0.459, -1.369, -2.499, -3.465, -0.532, -1.375, -2.29, -2.837, -0.505, -1.366, -2.365, -3.052, -0.422, -1.303, -2.888, -4.08, -0.45, -1.294, -2.65, -4.029, -0.468, -1.253, -2.65, -4.051, -0.455, -1.276, -2.673, -4.044, -0.482, -1.248, -2.567, -3.971, -0.519, -1.192, -2.5, -3.955, -0.494, -1.305, -2.422, -3.5, -0.525, -1.4, -2.261, -2.857, -0.52, -1.388, -2.236, -3.014, -0.421, -1.323, -2.807, -4.09, -0.455, -1.278, -2.715, -3.886, -0.466, -1.261, -2.643, -4.011, -0.473, -1.262, -2.578, -4.037, -0.496, -1.217, -2.558, -4.039, -0.502, -1.225, -2.507, -3.945, -0.472, -1.305, -2.59, -3.498, -0.532, -1.422, -2.239, -2.742, -0.184, -2.42, -2.98, -3.555, -0.241, -2.111, -2.776, -3.469, -0.214, -2.137, -3.024, -3.648, -0.184, -2.25, -3.332, -3.604, -0.256, -1.938, -2.86, -3.707, -0.19, -2.206, -3.122, -3.982, -0.223, -1.994, -3.444, -3.444],
};

// make a scatter plot
const scatter_graph_data = [{
    x: data_dictionary["appearances"].slice(0, 108),
    y: data_dictionary['values'].slice(0,108),
    mode: 'markers',
    type: 'scatter',
    name: 'Normal Tiles',
    marker: {color: 'rgb(67, 89, 156)',}
}, 
{
    // slice til the end
    x: data_dictionary["appearances"].slice(108,),
    y: data_dictionary['values'].slice(108,),
    mode: 'markers',
    type: 'scatter',
    name: 'Lucky Tiles',
    marker: {color: 'rgb(243, 32, 66)',}
}];

const scatterLayout = {
    xaxis: {range: [0, 4.2], title: "Appearance"},
    yaxis: {range: [0, 2000], title: "Losing Occurences"},
    title: "Losing Occurences against appearance",
    font: {
        family: "Ubuntu, monospace",
        size: 16,
    }
};

Plotly.newPlot('scatter-graph', scatter_graph_data, scatterLayout);

// prop graphs (lny against x)
const prop_scatter_graph_data = [{
    x: data_dictionary["appearances"].slice(0, 108),
    y: data_dictionary['ln_proportion'].slice(0,108),
    mode: 'markers',
    type: 'scatter',
    name: 'Normal Tiles',
    marker: {color: 'rgb(245, 177, 86)',}
}, 
{
    // slice til the end
    x: data_dictionary["appearances"].slice(108,),
    y: data_dictionary['ln_proportion'].slice(108,),
    mode: 'markers',
    type: 'scatter',
    name: 'Lucky Tiles',
    marker: {color: 'rgb(98, 42, 166)',}
}];

const ln_scatterLayout = {
    xaxis: {range: [0, 4.2], title: "Appearance"},
    yaxis: {range: [-10,0], title: "ln(Losing Proportion)"},
    title: "ln(Losing Proportion) against appearance",
    font: {
        family: "Ubuntu, monospace",
        size: 16,
    }
};

Plotly.newPlot('ln-graph', prop_scatter_graph_data, ln_scatterLayout);


// log log graph (lny against lnx)
const ll_graph_data = [{
    x: data_dictionary["ln_appearances"].slice(0, 108),
    y: data_dictionary['ln_proportion'].slice(0,108),
    mode: 'markers',
    type: 'scatter',
    name: 'Normal Tiles',
    marker: {color: 'rgb(23, 43, 243)',}
}, 
{
    // slice til the end
    x: data_dictionary["ln_appearances"].slice(108,),
    y: data_dictionary['ln_proportion'].slice(108,),
    mode: 'markers',
    type: 'scatter',
    name: 'Lucky Tiles',
    marker: {color: 'rgb(222, 112, 166)',}
}];

const ll_Layout = {
    xaxis: {range: [-0.2, 1.4], title: "ln(Appearance)"},
    yaxis: {range: [-10,0], title: "ln(Losing Proportion)"},
    title: "ln(Losing Proportion) against ln(appearance)",
    font: {
        family: "Ubuntu, monospace",
        size: 16,
    }
};

Plotly.newPlot('ll-graph', ll_graph_data, ll_Layout);

// fitted values to exp curve
// bind expand button to functionaility

function expand2(){
    expand(1)
    return
}

const fittedValuesTableExpandButton  = document.getElementById('exp_btn2');
fittedValuesTableExpandButton.addEventListener('click', expand2, false)

// make the table
let tiles = [];
for (let i=11;i<48;i++) {
    // skip all 0-ending tiles
    if (i%10 == 0) {
        continue
    }

    tiles[tiles.length] = i
}

const fittedValueData = {
    "tiles": tiles,
    "A": [1.49, 1.87, 1.69, 1.66, 1.59, 1.53, 1.38, 1.65, 1.36, 1.46, 1.81, 1.67, 1.6, 1.65, 1.54, 1.4, 1.49, 1.39, 1.4, 1.82, 1.66, 1.6, 1.57, 1.48, 1.46, 1.59, 1.37, 6.95, 4.49, 5.05, 6.15, 3.81, 5.74, 4.53],
    "k": [0.9, 1.03, 0.96, 0.95, 0.92, 0.89, 0.83, 0.96, 0.84, 0.88, 1.01, 0.96, 0.92, 0.95, 0.9, 0.84, 0.89, 0.86, 0.86, 1.01, 0.95, 0.93, 0.92, 0.88, 0.87, 0.93, 0.85, 2.12, 1.74, 1.83, 2.0, 1.6, 1.94, 1.73],
}

const fitted_table = makeTbl(fittedValueData);

fitted_table.setAttribute('class', 'resultsTable'); 

const fitted_table_div = document.getElementById('fitted-values-table');

fitted_table_div.append(fitted_table);

fillInNavFooter('Defense')
